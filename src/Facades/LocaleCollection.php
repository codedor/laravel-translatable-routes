<?php

namespace Codedor\TranslatableRoutes\Facades;

use Illuminate\Support\Facades\Facade;

/**
 * @method static \Codedor\TranslatableRoutes\Locale|null getCurrent()
 * @method static \Codedor\TranslatableRoutes\Locale fallback()
 * @method static \self setCurrent(string $currentLocale, string $url)
 * @method static bool isAllowed(string $localeToFind)
 * @method static \Codedor\TranslatableRoutes\Locale|null firstLocale(string $localeToFind)
 * @method static \Codedor\TranslatableRoutes\Locale|null firstLocaleWithUrl(string $localeToFind, string $url)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection range(int $from, int $to)
 * @method static array all()
 * @method static \Illuminate\Support\LazyCollection lazy()
 * @method static float|int|null avg(mixed $callback = null)
 * @method static float|int|null median(string|array|null $key = null)
 * @method static array|null mode(string|array|null $key = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection collapse()
 * @method static bool contains(callable|mixed|string $key, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection containsStrict(callable|mixed $key, mixed $value = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection doesntContain(mixed $key, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection crossJoin(\Illuminate\Contracts\Support\Arrayable|iterable ...$lists)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection diff(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection diffUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection diffAssoc(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection diffAssocUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection diffKeys(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection diffKeysUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection duplicates(callable|string|null $callback = null, bool $strict = false)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection duplicatesStrict(callable|string|null $callback = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection except(\Illuminate\Support\Enumerable|array $keys)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection filter(callable|null $callback = null)
 * @method static \Codedor\TranslatableRoutes\Locale first(callable|null $callback = null, mixed $default = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection flatten(int $depth = unknown)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection flip()
 * @method static \Codedor\TranslatableRoutes\LocaleCollection forget(mixed|array $keys)
 * @method static \Codedor\TranslatableRoutes\Locale get(void $key, mixed $default = null)
 * @method static mixed getOrPut(mixed $key, mixed $value)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection groupBy(callable|array|string $groupBy, bool $preserveKeys = false)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection keyBy(callable|array|string $keyBy)
 * @method static bool has(mixed|array $key)
 * @method static bool hasAny(mixed $key)
 * @method static string implode(callable|string $value, string|null $glue = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection intersect(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection intersectByKeys(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static bool isEmpty()
 * @method static bool containsOneItem()
 * @method static string join(string $glue, string $finalGlue = '')
 * @method static \Codedor\TranslatableRoutes\LocaleCollection keys()
 * @method static \Codedor\TranslatableRoutes\Locale last(callable|null $callback = null, mixed $default = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection pluck(string|int|array $value, string|null $key = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection map(callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection mapToDictionary(callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection mapWithKeys(callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection merge(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection mergeRecursive(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection combine(\Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection union(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection nth(int $step, int $offset = 0)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection only(\Illuminate\Support\Enumerable|array|string $keys)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection|mixed|null pop(int $count = 1)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection prepend(void $value, void $key = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection push(void ...$values)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection concat(iterable $source)
 * @method static \Codedor\TranslatableRoutes\Locale pull(void $key, mixed $default = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection put(void $key, void $value)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection|int random(callable|int|null $number = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection replace(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection replaceRecursive(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection reverse()
 * @method static mixed search(mixed $value, bool $strict = false)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection|mixed|null shift(int $count = 1)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection shuffle(int|null $seed = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection sliding(int $size = 2, int $step = 1)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection skip(int $count)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection skipUntil(mixed|callable $value)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection skipWhile(mixed|callable $value)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection slice(int $offset, int|null $length = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection split(int $numberOfGroups)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection splitIn(int $numberOfGroups)
 * @method static void sole(callable|string $key = null, mixed $operator = null, mixed $value = null)
 * @method static void firstOrFail(callable|string $key = null, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection chunk(int $size)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection chunkWhile(callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection sort(callable|null|int $callback = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection sortDesc(int $options = 0)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection sortBy(array|callable|string $callback, int $options = 0, bool $descending = false)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection sortByDesc(array|callable|string $callback, int $options = 0)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection sortKeys(int $options = 0, bool $descending = false)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection sortKeysDesc(int $options = 0)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection sortKeysUsing(callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection splice(int $offset, int|null $length = null, array $replacement = [])
 * @method static \Codedor\TranslatableRoutes\LocaleCollection take(int $limit)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection takeUntil(mixed|callable $value)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection takeWhile(mixed|callable $value)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection transform(callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection undot()
 * @method static \Codedor\TranslatableRoutes\LocaleCollection unique(callable|string|null $key = null, bool $strict = false)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection values()
 * @method static \Codedor\TranslatableRoutes\LocaleCollection zip(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection pad(int $size, void $value)
 * @method static \ArrayIterator getIterator()
 * @method static int count()
 * @method static \Codedor\TranslatableRoutes\LocaleCollection countBy(callable|string|null $countBy = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection add(void $item)
 * @method static \Illuminate\Support\Collection toBase()
 * @method static \Codedor\TranslatableRoutes\LocaleCollection make(\Illuminate\Contracts\Support\Arrayable|iterable|null $items = [])
 * @method static \Codedor\TranslatableRoutes\LocaleCollection wrap(iterable $value)
 * @method static array unwrap(array|\Codedor\TranslatableRoutes\LocaleCollection $value)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection empty()
 * @method static \Codedor\TranslatableRoutes\LocaleCollection times(int $number, callable|null $callback = null)
 * @method static float|int|null average(mixed $callback = null)
 * @method static bool some(callable|mixed|string $key, mixed $operator = null, mixed $value = null)
 * @method static never dd(mixed ...$args)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection dump()
 * @method static \Codedor\TranslatableRoutes\LocaleCollection each(callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection eachSpread(callable $callback)
 * @method static bool every(callable|mixed|string $key, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\TranslatableRoutes\Locale|null firstWhere(callable|string $key, mixed $operator = null, mixed $value = null)
 * @method static mixed value(string $key, mixed $default = null)
 * @method static bool isNotEmpty()
 * @method static \Codedor\TranslatableRoutes\LocaleCollection mapSpread(callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection mapToGroups(callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection flatMap(callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection mapInto(string $class)
 * @method static mixed min(callable|string|null $callback = null)
 * @method static mixed max(callable|string|null $callback = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection forPage(int $page, int $perPage)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection partition(callable|mixed|string $key, mixed $operator = null, mixed $value = null)
 * @method static mixed sum(callable|string|null $callback = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection|mixed whenEmpty(callable $callback, callable|null $default = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection|mixed whenNotEmpty(callable $callback, callable|null $default = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection|mixed unlessEmpty(callable $callback, callable|null $default = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection|mixed unlessNotEmpty(callable $callback, callable|null $default = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection where(callable|string $key, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection whereNull(string|null $key = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection whereNotNull(string|null $key = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection whereStrict(string $key, mixed $value)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection whereIn(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values, bool $strict = false)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection whereInStrict(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection whereBetween(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection whereNotBetween(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection whereNotIn(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values, bool $strict = false)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection whereNotInStrict(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection whereInstanceOf(string|array $type)
 * @method static void pipe(callable $callback)
 * @method static mixed pipeInto(string $class)
 * @method static mixed pipeThrough(array $callbacks)
 * @method static void reduce(callable $callback, void $initial = null)
 * @method static array reduceSpread(callable $callback, mixed ...$initial)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection reject(callable|bool|mixed $callback = true)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection tap(callable $callback)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection uniqueStrict(callable|string|null $key = null)
 * @method static \Illuminate\Support\Collection collect()
 * @method static array toArray()
 * @method static array jsonSerialize()
 * @method static string toJson(int $options = 0)
 * @method static \CachingIterator getCachingIterator(int $flags = 1)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection escapeWhenCastingToString(bool $escape = true)
 * @method static void proxy(string $method)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection|mixed when(\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)
 * @method static \Codedor\TranslatableRoutes\LocaleCollection|mixed unless(\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)
 * @method static void macro(string $name, object|callable $macro)
 * @method static void mixin(object $mixin, bool $replace = true)
 * @method static bool hasMacro(string $name)
 * @method static void flushMacros()
 *
 * @see \Codedor\TranslatableRoutes\LocaleCollection
 */
class LocaleCollection extends Facade
{
    /**
     * Get the registered name of the component.
     *
     * @return string
     */
    protected static function getFacadeAccessor()
    {
        return \Codedor\TranslatableRoutes\LocaleCollection::class;
    }
}
